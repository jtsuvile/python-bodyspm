from classdefinitions import Subject, Stimuli
from bodyfunctions import *
import pickle
import numpy as np
import pandas as pd
from scipy import stats
import csv
import matplotlib.pyplot as plt
import seaborn as sns


figloc = '/Users/jtsuvile/Documents/projects/kipupotilaat/data/figures/'
maskloc = '/Volumes/SCRsocbrain/kipupotilaat/data/'
datafile = '/Users/jtsuvile/Documents/projects/kipupotilaat/data/full_dataset.pickle'
print("loading data")
kipu = pd.read_pickle(datafile)
print("loaded data")
mask_fb = read_in_mask(maskloc + 'mask_front_new.png', maskloc + 'mask_back_new.png')
mask_one = read_in_mask(maskloc + 'mask_front_new.png')

stim_names = {'emotions_0':'sadness', 'emotions_1':'happiness', 'emotions_2':'anger', 'emotions_3':'surprise',
              'emotions_4': 'fear', 'emotions_5':'disgust', 'emotions_6':'neutral',
              'pain_0':'acute pain', 'pain_1': 'chonic_pain', 'sensitivity_0':'tactile sensitivity',
              'sensitivity_1':'nociceptive sensitivity', 'sensitivity_2':'hedonic sensitivity'}

twosided = [0,0,0,0,0,0,0,1,1,1,1,1]

kipu_diagnoses = pd.read_csv('/Users/jtsuvile/Documents/projects/kipupotilaat/kipuklinikka_kiputyyppi.csv', sep=';',
                             header=None, names=['diag_1','diag_2','subid'])
kipu_diagnoses['diag_1'] = kipu_diagnoses['diag_1'].str.strip()
kipu_diagnoses['diag_1'] = kipu_diagnoses['diag_1'].str.upper()
kipu_diagnoses['subid'] = kipu_diagnoses['subid'].apply(str)
kipu_diagnoses.set_index("subid", drop=False, inplace=True)
kipu_diagnoses.reindex(kipu['subids'])
crps = kipu_diagnoses['diag_1'].str.match('CRPS')

# # Visualise group differences

# for i, cond in enumerate(stim_names.keys()):
#
#     if twosided[i]:
#         mask = mask_fb
#         cmap = 'hot'
#         vmin= 0
#         fig = plt.figure(figsize=(25, 10))
#
#     else:
#         mask = mask_one
#         cmap = 'seismic'
#         vmin = -1
#         fig= plt.figure(figsize=(10,10))
#
#     crps_t = np.nanmean(binarize(kipu[cond][crps]), axis=0)
#     #crps_p[np.isnan(crps_p)] = 1
#     #crps_t[crps_p>0.05] = 0
#     masked_crps= np.ma.masked_where(mask != 1,crps_t)
#
#     kipu_t = np.nanmean(binarize(kipu[cond][~crps]), axis=0)
#     #kipu_p[np.isnan(kipu_p)] = 1
#     #kipu_t[kipu_p>0.05] = 0
#     masked_kipu= np.ma.masked_where(mask != 1,kipu_t)
#
#     if (np.nanmin(crps_t)==0) & (np.nanmin(kipu_t)==0):
#         twosamp_t, twosamp_p = compare_groups(kipu[cond], crps, ~crps, testtype='z')
#         twosamp_p[np.isnan(twosamp_p)] = 1
#         twosamp_t[twosamp_p>0.05] =0
#         masked_twosamp = np.ma.masked_where(mask != 1,twosamp_t)
#     else:
#         twosamp_t, twosamp_p = stats.ttest_ind(kipu[cond][crps], kipu[cond][~crps], axis=0, nan_policy='omit')
#         twosamp_p[np.isnan(twosamp_p)] = 1
#         twosamp_t[twosamp_p > 0.05] = 0
#         masked_twosamp = np.ma.masked_where(mask != 1, twosamp_t)
#
#     ax1 = plt.subplot(132)
#     img1 = plt.imshow(masked_kipu, cmap=cmap, vmin=vmin, vmax=1)
#     ax1.title.set_text('Other patients')
#     fig.colorbar(img1,fraction=0.046, pad=0.04)
#     ax1.axis('off')
#
#     ax2 = plt.subplot(131)
#     img2 = plt.imshow(masked_crps, cmap=cmap, vmin=vmin, vmax=1)
#     ax2.title.set_text('CRPS patients')
#     fig.colorbar(img2, fraction=0.046, pad=0.04)
#     ax2.axis('off')
#
#     ax3 = plt.subplot(133)
#     img3 = plt.imshow(masked_twosamp, cmap='bwr', vmin=-10, vmax=10)
#     ax3.title.set_text('Difference')
#     fig.colorbar(img3, fraction=0.046, pad=0.04)
#     ax3.axis('off')
#     #
#     fig.suptitle(stim_names[cond], size=20, va='top')
#     #plt.show()
#     plt.savefig(figloc+cond+'_kipu_crps.png')
#     plt.close()
#


#
# res_crps_pix = []
# res_crps_prop = []
# crps_conds = []
# res_kipu_pix = []
# res_kipu_prop = []
# kipu_conds = []
# for i, cond in enumerate(stim_names.keys()):
#     if twosided[i]:
#         mask_use = mask_fb
#     else:
#         mask_use = mask_one
#     pix_crps, prop_crps = count_pixels(kipu[cond][crps], mask=mask_use)
#     res_crps_pix.extend(pix_crps)
#     res_crps_prop.extend(prop_crps)
#     crps_conds.extend(np.repeat(stim_names[cond], len(pix_crps)))
#
#     pix_kipu, prop_kipu = count_pixels(kipu[cond][~crps], mask=mask_use)
#     res_kipu_pix.extend(pix_kipu)
#     res_kipu_prop.extend(prop_kipu)
#     kipu_conds.extend(np.repeat(stim_names[cond], len(pix_kipu)))
#
#
# res = pd.DataFrame({'condition':np.append(crps_conds, kipu_conds), 'pixels':np.append(res_crps_pix, res_kipu_pix), 'proportion':np.append(res_crps_prop, res_kipu_prop), "group":np.append(np.repeat('crps', len(res_crps_pix)), np.repeat('kipu', len(res_kipu_pix)), axis=0)})
#
#
# stim_names_emotions = {'emotions_0':'sadness', 'emotions_1':'happiness', 'emotions_2':'anger', 'emotions_3':'surprise',
#               'emotions_4': 'fear', 'emotions_5':'disgust', 'emotions_6':'neutral'}
#
# stim_names_pain = {'pain_0':'acute pain', 'pain_1': 'chonic_pain'}
# stim_names_sensitivity = {'sensitivity_0':'tactile sensitivity',
#               'sensitivity_1':'nociceptive sensitivity', 'sensitivity_2':'hedonic sensitivity'}
#
# visualise = res[res.condition.isin(stim_names_sensitivity.values())]
# fig = plt.figure()
# ax = sns.swarmplot(data=visualise, x='condition', y = 'proportion', hue='group', dodge=True, color=".4", size=5)
# ax = sns.boxplot(data=visualise, x='condition', y = 'proportion', hue='group', showfliers=False, notch=True)
# #plt.show()
# plt.savefig(figloc+'sensitivity_proportion_coloured_kipu_crps.png')
# plt.close()

kipu['bg'][crps][['age','work_sitting','work_physical', 'sex']].astype(float).describe(include='all')
sum(kipu['bg'][crps]['sex'].astype(int))
kipu['bg'][~crps][['age','work_sitting','work_physical', 'sex']].astype(float).describe(include='all')
sum(kipu['bg'][~crps]['sex'].astype(int))

kipu['bg'][crps][['feels_pain','feels_depression','feels_anxiety','feels_happy','feels_sad','feels_angry','feels_surprise','feels_disgust']].astype(int).describe(include='all')
kipu['bg'][~crps][['feels_pain','feels_depression','feels_anxiety','feels_happy','feels_sad','feels_angry','feels_surprise','feels_disgust']].astype(int).describe(include='all')


kipu['bg'][crps][['pain_now','pain_last_day','hist_migraine','hist_headache','hist_abdomen','hist_back_shoulder','hist_joint_limb','hist_menstrual',
                'painkillers_overcounter','painkillers_prescription', 'painkillers_othercns','hist_crps','hist_fibro']].astype(int).describe(include='all')
kipu['bg'][~crps][['pain_now','pain_last_day','hist_migraine','hist_headache','hist_abdomen','hist_back_shoulder','hist_joint_limb','hist_menstrual',
                'painkillers_overcounter','painkillers_prescription', 'painkillers_othercns']].crosstab(columns="count")

pd.crosstab(kipu['bg'][crps]['pain_now'], columns="count")
#'pain_last_day','hist_migraine','hist_headache','hist_abdomen','hist_back_shoulder','hist_joint_limb','hist_menstrual', 'hist_crps', 'hist_fibro'
# 'painkillers_overcounter','painkillers_prescription', 'painkillers_othercns'
